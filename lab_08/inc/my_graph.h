/**
 * Данный модуль содержит функции работы с графом.
 */
#ifndef __MY_GRAPH_H__
#define __MY_GRAPH_H__

#include <stdint.h>
#include <stddef.h>

#define ERR_OK         0
#define ERR_NOT_FOUND -1
#define ERR_MEM_ALLOC -2
#define ERR_FILE      -3
#define ERR_INCORRECT -4
#define ERR_CRITICAL  -5
#define MAX_NUM        1000
#define MAX_LENGHT     1000

/**
 * Тип графа.
 */
typedef struct my_graph my_graph;

/**
 * Пара номер-значение. 
 * Используется для возврата массива вершин, до которых можно добраться за отведённое расстояние.
 */
typedef struct
{
    uint32_t number, value;
} uint32_pair;

/**
 * Создание графа.
 * Возвращает указатель на созданный граф.
 * В случае ошибки возвращает нулевой указатель.
 */
my_graph *my_graph_init(void);
/**
 * Вставка ребра в граф.
 * На вход принимает указатель на граф, номера вершин, между которыми лежит ребро и длину ребра.
 * Возвращает код ошибки.
 * Корректность указателя не проверяется.
 */
int my_graph_push(my_graph*, uint32_t, uint32_t, uint32_t);
/**
 * Удаление ребра из графа.
 * На вход принимает указатель на граф и номера вершин, между которыми лежит ребро.
 * Возвращает длину удаленного ребра.
 * Корректность указателя не проверяется.
 * В случае отсутствия ребра возвращает 0.
 */
uint32_t my_graph_pop(my_graph*, uint32_t, uint32_t);
/**
 * Поиск вершин в графе.
 * На вход принимает указатель на граф, номер вершины, максимальную длину пути и указатель на пары значений.
 * Возвращает количество найденных вершин.
 * Корректность указателей не проверяется.
 * Во избежание утечек памяти указатель, на место которого вставится массив пар вершин и длин, должен быть освобождён или равен NULL.
 */
size_t my_graph_find(my_graph*, uint32_t, uint32_t, uint32_pair**);
/**
 * Сохранение графа в файл.
 * На вход принимает указатель на граф и имя файла.
 * Возвращает код ошибки.
 * Корректность указателей не проверяется.
 */
int my_graph_save(my_graph*, const char*);
/**
 * Удаление графа.
 * На вход принимает указатель на граф.
 * Корректность указателя не проверяется.
 */
void my_graph_destroy(my_graph*);

#endif // __MY_GRAPH_H__
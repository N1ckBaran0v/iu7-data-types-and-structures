/**
 * Данный модуль содержит интерфейс работы с деревом.
 */
#ifndef __MY_TREE_H__
#define __MY_TREE_H__

#include <stddef.h>
#include <stdbool.h>

/**
 * Дерево.
 */
typedef struct tree tree;

/**
 * Создание дерева.
 * Возвращает указатель на выделенную память.
 * При возникновении ошибки возвращает нулевой указатель.
 */
tree *init_tree(void);

/**
 * Добавление элемента в дерево.
 * На вход принимает указатель на дерево, а так же ключ и значение.
 * Возвращает код ошибки.
 * Корректность указателей не проверяется.
 */
int add_tree(tree *wood, const char *key, const char *value);

/**
 * Удаление элемента из дерева по имени.
 * На вход принимает указатель на дерево, а так же ключ.
 * Возвращает код ошибки.
 * Корректность указателей не проверяется.
 */
int del_tree(tree *wood, const char *key);

/**
 * Очищение дерева.
 * На вход принимает указатель на дерево.
 * Возвращает код ошибки.
 * Корректность указателей не проверяется.
 */
int  clear_tree(tree *wood);

/**
 * Поиск по дереву.
 * На вход принимает указатель на дерево, а так же ключ.
 * Возвращает значение.
 * Если значение не будет найдено, вернёт нулевой указатель.
 * Корректность указателей не проверяется.
 */
char *search_tree(const tree *wood, const char *key);

/**
 * Размер дерева.
 * На вход принимает указатель на дерево.
 * Возвращает количество элементов в дереве.
 * Корректность указателей не проверяется.
 */
size_t size_tree(const tree *wood);

/**
 * Размер используемой памяти.
 * На вход принимает указатель на дерево.
 * Возвращает размер памяти, используемой деревом.
 * Корректность указателей не проверяется.
 */
size_t mem_size_tree(const tree *wood);

/**
 * Проверка на пустоту.
 * На вход принимает указатель на дерево.
 * Возвращает true если дерево пустое, false иначе.
 * Корректность указателей не проверяется.
 */
bool is_empty_tree(const tree *wood);

/**
 * Освобождение памяти.
 * На вход принимает указатель на дерево.
 * Корректность указателя не проверяется.
 */
void destroy_tree(tree *wood);

/**
 * Сохранение дерева.
 * На вход принимает указатель на дерево и имя файла.
 * Возвращает код ошибки.
 * Корректность указателей не проверяется.
 * Существование файла с таким именем не проверяется, если существует, то он перезапишется.
 */
int export_tree(const tree *wood, const char *filename);

#ifndef DNDEBUG
/**
 * Количество сравнений при последнем добавлении/удалении.
 * На вход принимает указатель на дерево.
 * Возвращает количество сравнений.
 * Корректность указателя не проверяется.
 * Если указатель нулевой или сравнений раньше не было, вернёт 0.
 */
int lastcmp_tree(const tree *wood);
#endif

#endif // __MY_TREE_H__
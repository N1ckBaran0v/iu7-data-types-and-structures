/**
 * Данный модуль содержит функции для работы со стеком на списке.
 */
#ifndef __MY_LSTACK_H__
#define __MY_LSTACK_H__

#include <stdio.h>
#include <stddef.h>
#include <stdbool.h>

#include "my_stack.h"

/**
 * Создание стека на списке.
 * Возвращает указатель на выделенную память.
 * При возникновении ошибки возвращает нулевой указатель.
 */
lstack *init_lstack(void);

/**
 * Копирование стека.
 * На вход принимает указатель на стек на списке.
 * Возвращает указатель на выделенную память.
 * При возникновении ошибки возвращает нулевой указатель.
 * При передаче указателя на другой объект поведение не определено.
 */
lstack *copy_lstack(lstack *stack);

/**
 * Вставка элемента в стек.
 * На вход принимает указатель на стек на списке и вставляемое значение.
 * Возвращает код ошибки.
 * При передаче указателя на другой объект поведение не определено.
 */
int push_lstack(lstack *stack, const TYPE_STACK value);

/**
 * Удаление из стека.
 * На вход принимает указатель на стек на списке и указатель на возвращаемый элемент.
 * Возвращает код ошибки.
 * Корректность указателей не проверяется.
 */
int pop_lstack(lstack *stack, TYPE_STACK *value);

/**
 * Вывод размера.
 * На вход принимает указатель на стек на списке.
 * Возвращает размер выделенной памяти.
 * При передаче указателя на другой объект поведение не определено.
 */
size_t memsize_lstack(lstack *stack);

/**
 * Размер стека.
 * На вход принимает указатель на стек на списке.
 * Возвращает количество элементов в стеке.
 * Для нулевого указателя возвращает размер 0.
 * При передаче указателя на другой объект поведение не определено.
 */
size_t size_lstack(lstack *stack);

/**
 * Проверка на пустоту стека.
 * На вход принимает указатель на стек на списке.
 * Возвращает истину или ложь.
 * Для нулевого указателя считает что стек пустой.
 * При передаче указателя на другой объект поведение не определено.
 */
bool is_empty_lstack(lstack *stack);

/**
 * Переворот стека.
 * На вход принимает указатель на стек на списке.
 * При передаче указателя на другой объект поведение не определено.
 */
void reverse_lstack(lstack *stack);

/**
 * Уничтожение стека.
 * На вход принимает указатель на стек на списке.
 * При передаче указателя на другой объект поведение не определено.
 */
void destroy_lstack(lstack *stack);

/**
 * Создание журнала.
 * Возвращает код ошибки.
 */
int init_log(void);

/**
 * Вывод состояния стека.
 * На вход принимает указатель на стек на списке.
 * При передаче указателя на другой объект поведение не определено.
 */
int print_state(lstack *stack);

/**
 * Удаление журанала.
 */
void free_log(void);

/**
 * Изменение состояния журнала.
 * На вход принимает истину или ложь - активировать или деактивировать журнал.
 */
void set_log(bool val);

#endif // __MY_LSTACK_H__
